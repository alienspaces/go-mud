#!/usr/bin/env bash

# Establish and validate required environment
# USAGE: environment [optional path to .env]


function verify_env {
    echo "=> (env) Verifying environment"

    # Required for all environments
    ENV_VARS=( \
        # General
        "APP_SERVER_ENV" \
        "APP_SERVER_GO_VERSION" \
        "APP_SERVER_HOST" \
        # Examples
        "APP_SERVER_ENABLE_EXAMPLES" \
        # Database
        'APP_SERVER_DB_SERVICE' \
		'APP_SERVER_DB_HOST' \
		'APP_SERVER_DB_NAME' \
		'APP_SERVER_DB_PORT' \
		'APP_SERVER_DB_USER' \
		'APP_SERVER_DB_PASSWORD' \
        # JSON Schema
		'APP_SERVER_SCHEMA_PATH' \
    );

    # Verify environment
    MISSING=0
    for ENV_VAR_NAME in ${ENV_VARS[@]}; do

        if ! [[ -n ${!ENV_VAR_NAME} ]]; then
            echo "=> (env) Variable ${ENV_VAR_NAME} ** MISSING **"
            MISSING=1
            continue
        fi

        # Masked variable values
        if [[ "${ENV_VAR_NAME}" = *"PASSWORD" ]] || [[ "${ENV_VAR_NAME}" = *"KEY" ]] || [[ "${ENV_VAR_NAME}" = *"SECRET" ]]; then
            echo "=> (env) ${ENV_VAR_NAME} => ********"
        else
            echo "=> (env) ${ENV_VAR_NAME} => ${!ENV_VAR_NAME}"
        fi
    done

    if [[ "$MISSING" == "1" ]]; then
        echo "=> (env) Variables ** MISSING **, cannot continue"
        exit 1
    fi
}

# Dnvironment dot file support
DOTFILE_PATH="."
if [ -n "$1" ]; then
    DOTFILE_PATH="$1"
fi

echo "=> (env) Checking $DOTFILE_PATH/.env"

if [ -f "$DOTFILE_PATH/.env" ]; then
    echo "=> (env) Sourcing $DOTFILE_PATH/.env"
    source $DOTFILE_PATH/.env
fi

# Go present?
if [ $(command -v go) ]; then
    
    VERSION=$(go version)
    if [[ "$VERSION" != *"${APP_SERVER_GO_VERSION}"* ]]; then
        echo "(env) Go version ${APP_SERVER_GO_VERSION} is required, please check your Go version and try again"
        exit 1
    fi
fi

# Verify environment
verify_env
