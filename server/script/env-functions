#!/usr/bin/env bash

# Establish and validate required environment
# USAGE: environment [optional path to .env]
env_vars=( \
    # General
    "APP_SERVER_ENV" \
    "APP_SERVER_HOME" \
    "APP_SERVER_HOST" \
    "APP_SERVER_PORT" \
    "APP_SERVER_LOG_LEVEL" \
    "APP_SERVER_GO_VERSION" \
    # Examples
    "APP_SERVER_ENABLE_EXAMPLES" \
    # Template
    "APP_SERVER_ENABLE_TEMPLATE" \
    # Database
    'APP_SERVER_DB_HOST' \
    'APP_SERVER_DB_NAME' \
    'APP_SERVER_DB_PORT' \
    'APP_SERVER_DB_USER' \
    'APP_SERVER_DB_PASSWORD' \
    # JSON Schema
    'APP_SERVER_SCHEMA_PATH' \
);

function clear_env {
    for env_var_name in "${env_vars[@]}"; do
        echo "=> (env) Clearing $env_var_name"
        unset "$env_var_name"
    done
}

function verify_env {
    echo "=> (env) Verifying environment"

    MISSING=0
    for env_var_name in "${env_vars[@]}"; do

        if [[ -z ${!env_var_name} ]]; then
            echo "=> (env) Variable ${env_var_name} ** MISSING **"
            MISSING=1
            continue
        fi

        # Masked variable values
        if [[ "${env_var_name}" = *"PASSWORD" ]] || [[ "${env_var_name}" = *"KEY" ]] || [[ "${env_var_name}" = *"SECRET" ]]; then
            echo "=> (env) ${env_var_name} => ********"
        else
            echo "=> (env) ${env_var_name} => ${!env_var_name}"
        fi
    done

    if [[ "$MISSING" == "1" ]]; then
        echo "=> (env) Variables ** MISSING **, cannot continue"
        exit 1
    fi
}
