{
	"info": {
		"_postman_id": "6c52ee0c-9063-4e35-a0ea-a4967e5bd4e2",
		"name": "Go-MUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get dungeons",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Get dungeons', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.equal(2);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_id');",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_name');",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_description');",
							"    });  ",
							"",
							"    // Use first returned dungeon ID for additional tests",
							"    pm.collectionVariables.set(\"dungeon_id\", respJSON.data[0].dungeon_id);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/dungeons",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dungeons"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dungeon",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Get dungeon', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.equal(1);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_id');",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_name');",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_description');",
							"    });  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/dungeons/{{dungeon_id}}",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dungeons",
						"{{dungeon_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dungeon locations",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/dungeons/55087d68-dc17-41ed-bb53-12dc636ac196/locations",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dungeons",
						"55087d68-dc17-41ed-bb53-12dc636ac196",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Create character', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.equal(1);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Character has property\").to.have.property('character_id');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_name');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_strength');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_dexterity');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_intelligence');",
							"    });  ",
							"",
							"    // Use first returned character ID for additional tests",
							"    pm.collectionVariables.set(\"character_id\", respJSON.data[0].character_id);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"character_name\": \"{{$randomFirstName}}\",\n        \"character_strength\": 10,\n        \"character_dexterity\": 10,\n        \"character_intelligence\": 10\n    }\n}"
				},
				"url": {
					"raw": "{{hostname}}/api/v1/characters",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"characters"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Get character', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.equal(1);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Character has property\").to.have.property('character_id');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_name');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_strength');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_dexterity');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_intelligence');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_health');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_fatigue');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_coins');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_experience_points');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_attribute_points');",
							"    });  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/characters/{{character_id}}",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"characters",
						"{{character_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Character enters dungeon",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Character enters dungeon', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.equal(1);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_id');",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_name');",
							"        pm.expect(e, \"Dungeon has property\").to.have.property('dungeon_description');",
							"        pm.expect(e, \"Location has property\").to.have.property('location_id');",
							"        pm.expect(e, \"Location has property\").to.have.property('location_name');",
							"        pm.expect(e, \"Location has property\").to.have.property('location_description');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_id');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_name');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_strength');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_dexterity');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_intelligence');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_health');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_fatigue');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_coins');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_experience_points');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_attribute_points');",
							"    });  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostname}}/api/v1/dungeons/{{dungeon_id}}/characters/{{character_id}}/enter",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dungeons",
						"{{dungeon_id}}",
						"characters",
						"{{character_id}}",
						"enter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Character looks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Character enters dungeon', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.be.above(0);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Action has property\").to.have.property('action_id');",
							"        pm.expect(e, \"Action has property\").to.have.property('action_command');",
							"        pm.expect(e, \"Action has property\").to.have.property('action_narrative');",
							"        pm.expect(e, \"Action has property\").to.have.property('action_turn_number');",
							"        pm.expect(e, \"Action has property\").to.have.property('action_serial_number');",
							"        pm.expect(e, \"Action has property\").to.have.property('action_location');",
							"",
							"        const l = e.action_location;",
							"        for (var p in l) {",
							"            console.log(`Location property ${p}`);",
							"        }",
							"",
							"        pm.expect(l, \"Location has property\").to.have.property('location_name');",
							"        pm.expect(l, \"Location has property\").to.have.property('location_description');",
							"        pm.expect(l, \"Location has property\").to.have.property('location_directions');",
							"        pm.expect(l, \"Location has property\").to.have.property('location_characters');",
							"        pm.expect(l, \"Location has property\").to.have.property('location_monsters');",
							"        pm.expect(l, \"Location has property\").to.have.property('location_objects');",
							"    });  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"sentence\": \"look\"\n    }\n}\n"
				},
				"url": {
					"raw": "{{hostname}}/api/v1/dungeons/{{dungeon_id}}/characters/{{character_id}}/actions",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dungeons",
						"{{dungeon_id}}",
						"characters",
						"{{character_id}}",
						"actions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Character exits dungeon",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ",
							"pm.test('Character enters dungeon', function() {",
							"    try {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"    } catch (e) {",
							"        throw new Error(`${e.message}: ${JSON.stringify(pm.response.json())}`);",
							"    }",
							"",
							"    const respJSON = pm.response.json();",
							"    pm.expect(respJSON, \"Response JSON\").to.not.be.empty;",
							"    pm.expect(respJSON.data, \"Response JSON data\").to.not.be.empty;",
							"    pm.expect(respJSON.data.length, \"Response JSON data length\").to.equal(1);",
							"",
							"    respJSON.data.forEach(function(e) {",
							"        pm.expect(e, \"Character has property\").to.have.property('character_id');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_name');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_strength');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_dexterity');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_intelligence');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_health');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_fatigue');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_coins');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_experience_points');",
							"        pm.expect(e, \"Character has property\").to.have.property('character_attribute_points');",
							"    });  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{hostname}}/api/v1/dungeons/{{dungeon_id}}/characters/{{character_id}}/exit",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dungeons",
						"{{dungeon_id}}",
						"characters",
						"{{character_id}}",
						"exit"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "hostname",
			"value": "http://localhost:8084",
			"type": "default"
		},
		{
			"key": "dungeonId",
			"value": ""
		},
		{
			"key": "dungeon_id",
			"value": ""
		},
		{
			"key": "character_id",
			"value": ""
		}
	]
}